syntax = "proto3";

package consensus;
option go_package = "github.com/jaimemartinez88/consensus";

service RaftService {
    // rpc RegisterServer(Server) returns (Success);
    rpc RequestVote(RequestVoteReq) returns (RequestVoteRes);
    rpc AppendEntries(AppendEntriesReq) returns (AppendEntriesRes);
}

/*
Invoked by candidates to gather votes (§5.2).
Arguments:
term candidate’s term
candidateId candidate requesting vote
lastLogIndex index of candidate’s last log entry (§5.4)
lastLogTerm term of candidate’s last log entry (§5.4)
Results:
term currentTerm, for candidate to update itself
voteGranted true means candidate received vote

*/
message RequestVoteReq {
    int64 current_term = 1;
    string candidate_id = 2;
    int64 last_log_index = 3;
    int64 last_log_term = 4;
}

message RequestVoteRes{
    int64 current_term = 1;
    bool vote_granted = 2;
}

message AppendEntriesReq{
    int64 current_term = 1;
    string leader_id = 2;
    int64 prev_log_index = 3;
    int64 prev_log_term = 4;
    repeated string entries = 5;
    int64 leader_commit = 6;
}

message AppendEntriesRes{
    int64 current_term = 1;
    bool success = 2;
}